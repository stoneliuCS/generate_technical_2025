// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APIV1ChallengeBackendIDAliensGet implements GET /api/v1/challenge/backend/{id}/aliens operation.
	//
	// GET /api/v1/challenge/backend/{id}/aliens
	APIV1ChallengeBackendIDAliensGet(ctx context.Context, params APIV1ChallengeBackendIDAliensGetParams) (APIV1ChallengeBackendIDAliensGetRes, error)
	// APIV1ChallengeBackendIDAliensSubmitPost implements POST /api/v1/challenge/backend/{id}/aliens/submit operation.
	//
	// POST /api/v1/challenge/backend/{id}/aliens/submit
	APIV1ChallengeBackendIDAliensSubmitPost(ctx context.Context, req OptAPIV1ChallengeBackendIDAliensSubmitPostReq, params APIV1ChallengeBackendIDAliensSubmitPostParams) (APIV1ChallengeBackendIDAliensSubmitPostRes, error)
	// APIV1ChallengeFrontendIDAliensGet implements GET /api/v1/challenge/frontend/{id}/aliens operation.
	//
	// GET /api/v1/challenge/frontend/{id}/aliens
	APIV1ChallengeFrontendIDAliensGet(ctx context.Context, params APIV1ChallengeFrontendIDAliensGetParams) (APIV1ChallengeFrontendIDAliensGetRes, error)
	// APIV1MemberGet implements GET /api/v1/member operation.
	//
	// GET /api/v1/member
	APIV1MemberGet(ctx context.Context, params APIV1MemberGetParams) (APIV1MemberGetRes, error)
	// APIV1MemberRegisterPost implements POST /api/v1/member/register operation.
	//
	// POST /api/v1/member/register
	APIV1MemberRegisterPost(ctx context.Context, req OptAPIV1MemberRegisterPostReq) (APIV1MemberRegisterPostRes, error)
	// Get implements GET / operation.
	//
	// API documentation.
	//
	// GET /
	Get(ctx context.Context) (GetRes, error)
	// HealthcheckGet implements GET /healthcheck operation.
	//
	// GET /healthcheck
	HealthcheckGet(ctx context.Context) (*HealthcheckGetOK, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
